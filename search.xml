<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>HelloWorld!</tag>
      </tags>
  </entry>
  <entry>
    <title>简单总结</title>
    <url>/2022/04/11/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="学习记录">学习记录</h1>
<h2 id="数学部分">数学部分</h2>
<ul>
<li>高数部分是快完成Task了</li>
<li>这个月对于高数部分进行完成!</li>
</ul>
<h2 id="计算机专业课">计算机专业课</h2>
<ul>
<li>现在确实还没有开始一轮复习</li>
<li>不过对于数据结构部分有一点简单的认识和了解</li>
</ul>
<h2 id="英语">英语</h2>
<ul>
<li>坚持每一天背单词</li>
<li>也只有这些了</li>
</ul>
<h2 id="经济学专业课">经济学专业课</h2>
<ul>
<li>有点没有想到 挂科了 挺尴尬的 还是直接重修的那种课程!</li>
<li>完成基本的60分就好了 希望下次注意一下吧!</li>
</ul>
<h1 id="计算机方面">计算机方面</h1>
<h2 id="数据结构和算法">数据结构和算法</h2>
<h3 id="数据结构">数据结构</h3>
<ul>
<li>链表 队列 栈</li>
<li>树 图</li>
<li>高级的数据结构
<ul>
<li>B/B+树</li>
<li>并查集</li>
<li>等</li>
</ul></li>
<li>补充知识</li>
</ul>
<h3 id="算法">算法</h3>
<ul>
<li>暴力枚举</li>
<li>排序
<ul>
<li>冒泡 插入 希尔</li>
<li>归并 快排</li>
<li>堆排序 桶排序</li>
</ul></li>
<li>双指针</li>
<li>回溯
<ul>
<li>全排列 下一个排列等</li>
</ul></li>
<li>贪心 (数学证明_没有证明的贪心 不是贪心__)</li>
<li>DFS BFS</li>
<li>等</li>
</ul>
]]></content>
      <tags>
        <tag>23考研</tag>
      </tags>
  </entry>
  <entry>
    <title>年轻人的社交元宇宙</title>
    <url>/2022/03/10/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%A4%BE%E4%BA%A4%E5%85%83%E5%AE%87%E5%AE%99/</url>
    <content><![CDATA[<h1 id="年轻人的社交元宇宙">年轻人的社交元宇宙</h1>
<p><a href="https://www.soulapp.cn/home">小站</a> ## 我们的口号 1.
“还孤单一个人吗，快来soul银河寻找那个TA” 2.
不约不恋不看脸，我们就单纯的聊聊天吧”</p>
<h2 id="功能介绍">功能介绍</h2>
<ol type="1">
<li>瞬间广场——用户可以通过瞬间功能发表文字. 图片.
视频和语音；Soul通过算法为用户推荐可能感兴趣的瞬间，用户可以对其他人发布感兴趣的内容进行评论和点赞。</li>
<li>灵魂互动——系统为用户一键连接可能聊得来的人，在线实时聊天。</li>
<li>语音互动——系统为用户匹配可能感兴趣的人，在线语音聊天。</li>
<li>群聊派对——主题式多人语音群聊功能。用户可根据主题创建派对，或选择感兴趣的派对进行交流。</li>
<li>脸基尼视频互动——系统为用户连接想要视频聊天的人，在线视频聊天</li>
<li>Soul狼人——系统为用户提供的多人互动策略游戏</li>
<li>校园吧——校园认证用户专属的交流空间 ## 发展历程</li>
<li>2021年5月，Soul上线校园吧。</li>
<li>2021年1月，Soul月活跃用户量突破3000万，成为行业同品类中日均DAU启动次数.
日均发布率和Z世代用户渗透率最高的App之一。</li>
<li>2020年10月，Soul首次登顶App Store社交榜。</li>
<li>2020年8月，Soul推出群聊功能，群聊派对正式上线。</li>
<li>2020年7月，Soul月活跃用户量突破2000万。</li>
<li>2019年11月13日，Soul App在苹果App
Store下架，对此，Soul做出回应：为提升用户体验，针对iOS端正在更新升级系统。
2019年11月16日，Soul App 在 App
Store恢复下载，各项功能均可以正常使用。</li>
<li>2019年9月10日，Soul App重新上架苹果App
Store，各项功能均可正常使用。Soul
App表示，将继续投入大量精力，通过技术和人工手段完善内容治理。</li>
<li>2019年8月28日，Soul
App陆续在各大安卓应用商店重新上架，各项功能均可以正常使用。Soul表示，为了共创清朗和谐的线上空间，Soul审核团队将对用户内容进行更严格的审核和分发。同时SoulApp注册年龄需年满18
周岁，针对存量青少年，Soul更新了青少年模式</li>
<li>2019年6月28日，国家网信办通报了会同有关部门.
针对网络音频乱象启动专项整治行动的相关情况，包括Soul
在内的多款应用牵涉其中。当天，SoulApp在各大应用商店下架。
对此，Soul回应称：“我们充分理解网络平台肩负的社会责任，为了维护健康的社交生态，Soul将配合有关部门深入自查自改，严格审核相关功能和内容，采取必要措施以完全符合所有相关法律法规要求。”</li>
<li>2019年1月，自定义头像功能上线，让Souler做独一无二的自己。9月，脸基尼互动功能发布，开启视频社交新玩法。</li>
<li>2018年12月，Soul月活跃用户量突破1000万。</li>
<li>2018年6月，语音互动功能发布，Soul跻身95后最受欢迎的社交App之一。</li>
<li>2017年11月，Soul推荐2.0功能上线，实现千人千面的广场和星球，Soul正式步入算法时代。</li>
<li>2016年11月，Soul App 1.0 正式上线，通过种子用户们自发安利.
口碑传播，注册用户快速增加。</li>
<li>2016年，SoulApp产品正式上线。</li>
<li>2015年6月，任意门科技有限公司在上海正式成立。
2021年7月，Soul暂停上市。
2021年，Soul作为深受Z世代年轻人喜爱的社交平台，迎合年轻人多元化的社交需求，联合美团推出剧本杀盲盒，并邀请《密室大逃脱大神版》中的CP蒲熠星.
郭文韬作为美团剧本杀甄选官，一同打造剧本杀好本盲盒活动。</li>
</ol>
]]></content>
      <tags>
        <tag>不开心你就来Soul呀</tag>
      </tags>
  </entry>
  <entry>
    <title>致未来女朋友的一封信</title>
    <url>/2022/03/14/%E8%87%B4%E6%9C%AA%E6%9D%A5%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="105ac743c87c391e3578f265490b6b12894827442c1991aac18670ce96b40140"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>致未来</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2022/04/12/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<blockquote>
<p>导入简单设置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="comment">//q数组用作存储数据 temp作为归并排序过程中存储过程数据</span></span><br><span class="line"><span class="type">int</span> q[N],temp[N],n;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="插入排序">插入排序</h2>
<h3 id="直接插入排序">直接插入排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,tmp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;q[i<span class="number">-1</span>])&#123;</span><br><span class="line">            tmp=q[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;q[j]&gt;tmp;--j)q[j+<span class="number">1</span>]=q[j];</span><br><span class="line">            q[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="折半插入排序">折半插入排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//折半插入排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">half_insert_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,l,r,tmp,mid;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        tmp=q[i],l=<span class="number">0</span>,r=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid]&lt;tmp)l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=l;--j)q[j+<span class="number">1</span>]=q[j];</span><br><span class="line">        q[l]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="希尔排序">希尔排序</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,dk,tmp;</span><br><span class="line">    <span class="keyword">for</span>(dk=n&gt;&gt;<span class="number">1</span>;dk&gt;=<span class="number">1</span>;dk&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=dk;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i]&lt;q[i-dk])&#123;</span><br><span class="line">                tmp=q[i];</span><br><span class="line">                <span class="keyword">for</span>(j=i-dk;j&gt;=<span class="number">0</span>&amp;&amp;q[j]&gt;tmp;j-=dk)</span><br><span class="line">                    q[j+dk]=q[j];</span><br><span class="line">                q[i-dk]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优秀的排序">优秀的排序</h2>
<h3 id="快速排序">快速排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序 [y总排序模板]</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,tmp,mid;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    mid=q[l+r&gt;&gt;<span class="number">1</span>],i=l<span class="number">-1</span>,j=r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;mid);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;mid);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            tmp=q[i];</span><br><span class="line">            q[i]=q[j],q[j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q,l,j), quick_sort(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="归并排序">归并排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并排序 [y总排序模板]</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,mid,k;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    mid=l+r&gt;&gt;<span class="number">1</span>,i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    merge_sort(q,l,mid), merge_sort(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;q[j])temp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)temp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)temp[k++]=q[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;++i,++j)q[i]=temp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="正在补充ing">正在补充ing</h2>
<p><a
href="https://gitee.com/NingCoder/Data_structure/blob/master/排序/sort.c">源代码文件</a></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2022/04/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="考研408部分排序算法">考研408部分排序算法</h1>
<h3 id="基本设置">基本设置</h3>
<ul>
<li><p>文件导入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="type">int</span> q[N],n;</span><br></pre></td></tr></table></figure></li>
<li><p>交换函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x,<span class="type">int</span> *y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=*x;</span><br><span class="line">    *x=*y;</span><br><span class="line">    *y=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>完整代码见文章底部</p></li>
</ul>
<h2 id="插入排序">插入排序</h2>
<h3 id="直接插入排序">直接插入排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,tmp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;q[i<span class="number">-1</span>])&#123;</span><br><span class="line">            tmp=q[i];<span class="comment">//记录数值比较小的</span></span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;q[j]&gt;tmp;--j)</span><br><span class="line">                q[j+<span class="number">1</span>]=q[j];</span><br><span class="line">            <span class="comment">//index=j+1会找到合适的</span></span><br><span class="line">            q[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="折半插入排序">折半插入排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">half_insert_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,tmp,l,r,mid;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;q[i<span class="number">-1</span>])&#123;</span><br><span class="line">            tmp=q[i];</span><br><span class="line">            l=<span class="number">0</span>,r=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid]&gt;tmp)r=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=l&amp;&amp;q[j]&gt;tmp;--j)q[j+<span class="number">1</span>]=q[j];</span><br><span class="line">            q[l]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="希尔排序">希尔排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,tmp,dk;</span><br><span class="line">    <span class="keyword">for</span>(dk=n&gt;&gt;<span class="number">1</span>;dk&gt;=<span class="number">1</span>;dk&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=dk;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i]&lt;q[i-dk])&#123;</span><br><span class="line">                tmp=q[i];</span><br><span class="line">                <span class="keyword">for</span>(j=i-dk;j&gt;=<span class="number">0</span>&amp;&amp;q[j]&gt;tmp;--j)</span><br><span class="line">                    q[j+dk]=q[j];</span><br><span class="line">                q[j+dk]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="交换排序">交换排序</h2>
<h3 id="冒泡排序">冒泡排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;--j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[j]&lt;q[j<span class="number">-1</span>])&#123;</span><br><span class="line">                swap(&amp;q[j],&amp;q[j<span class="number">-1</span>]);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序">快速排序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> i,j,x;</span><br><span class="line">    i=l<span class="number">-1</span>,j=r+<span class="number">1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)swap(&amp;q[i],&amp;q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q,l,j), quick_sort(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序">选择排序</h2>
<h3 id="简单选择排序">简单选择排序</h3>
<h4 id="基本思路">基本思路</h4>
<ul>
<li>每一次选择 剩下的<span
class="math inline">\(n-i+1\)</span>个数中最大的 或是最小的数
插入到结果之中</li>
<li>空间复杂度 常数级 辅助存储空间<span
class="math inline">\(O(1)\)</span></li>
<li>时间复杂度 移动次数 最好是0 比较次数是<span
class="math inline">\(n(n-1)/2\)</span> 复杂度始终是<span
class="math inline">\(O(n^2)\)</span></li>
</ul>
<h4 id="代码实现">代码实现</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,idx;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        idx=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[idx]&lt;q[j])</span><br><span class="line">                idx=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx!=i)swap(&amp;q[idx],&amp;q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆排序">堆排序</h3>
<h4 id="基本思路-1">基本思路</h4>
<ul>
<li>序列构建堆 我们是构建大顶堆 堆顶元素就是最大的元素</li>
<li>堆顶元素与最后一个元素交换 剩下元素构建堆</li>
<li>如此重复 每次会或得到一个最大值 我们放到最后一个 以此 我们会得到一个
最大堆</li>
<li>调整的细节 是从下往上调节 如果 下面都是小于上面的
自然上面的就是最大的</li>
<li>如果是从上往下调节 会导致 重复调节 影响效率</li>
<li>时间复杂度 堆的建立<span class="math inline">\(O(n)\)</span>
堆的排序<span class="math inline">\(O(nlog_2n)\)</span> 调整<span
class="math inline">\(O(h)\)</span>是堆的高度</li>
<li>空间复杂度 依靠常数级别空间 存储中间变量为 <span
class="math inline">\(O(1)\)</span></li>
</ul>
<h4 id="代码实现-1">代码实现</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大顶堆的构建</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">largest_heap</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> dad,son;</span><br><span class="line">    dad=start,son=dad*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(son&lt;=end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;=end&amp;&amp;q[son]&lt;q[son+<span class="number">1</span>])son++;</span><br><span class="line">        <span class="keyword">if</span>(q[dad]&gt;q[son]) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            swap(&amp;q[son],&amp;q[dad]);</span><br><span class="line">            dad=son,son=dad*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序的实现过程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=(n&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        largest_heap(q,i,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">        swap(&amp;q[<span class="number">0</span>],&amp;q[i]);</span><br><span class="line">        largest_heap(q,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="正在更新ing">正在更新ing</h2>
<p><a
href="https://gitee.com/NingCoder/Data_structure/blob/master/排序/sort01.c">源代码地址</a></p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
