<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2022/04/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/04/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="考研408部分排序算法">考研408部分排序算法</h1><h3 id="基本设置">基本设置</h3><ul><li><p>文件导入</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100</span><br><span class="hljs-type">int</span> q[N],n;<br></code></pre></div></td></tr></table></figure></li><li><p>交换函数</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *x,<span class="hljs-type">int</span> *y)</span>&#123;<br>    <span class="hljs-type">int</span> temp=*x;<br>    *x=*y;<br>    *y=temp;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>完整代码见文章底部</p></li></ul><h2 id="插入排序">插入排序</h2><h3 id="直接插入排序">直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">insert_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,tmp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[i<span class="hljs-number">-1</span>])&#123;<br>            tmp=q[i];<span class="hljs-comment">//记录数值比较小的</span><br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>&amp;&amp;q[j]&gt;tmp;--j)<br>                q[j+<span class="hljs-number">1</span>]=q[j];<br>            <span class="hljs-comment">//index=j+1会找到合适的</span><br>            q[j+<span class="hljs-number">1</span>]=tmp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="折半插入排序">折半插入排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">half_insert_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,tmp,l,r,mid;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[i<span class="hljs-number">-1</span>])&#123;<br>            tmp=q[i];<br>            l=<span class="hljs-number">0</span>,r=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>                mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(q[mid]&gt;tmp)r=mid<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>;j&gt;=l&amp;&amp;q[j]&gt;tmp;--j)q[j+<span class="hljs-number">1</span>]=q[j];<br>            q[l]=tmp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="希尔排序">希尔排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">shell_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,tmp,dk;<br>    <span class="hljs-keyword">for</span>(dk=n&gt;&gt;<span class="hljs-number">1</span>;dk&gt;=<span class="hljs-number">1</span>;dk&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(i=dk;i&lt;n;++i)&#123;<br>            <span class="hljs-keyword">if</span>(q[i]&lt;q[i-dk])&#123;<br>                tmp=q[i];<br>                <span class="hljs-keyword">for</span>(j=i-dk;j&gt;=<span class="hljs-number">0</span>&amp;&amp;q[j]&gt;tmp;--j)<br>                    q[j+dk]=q[j];<br>                q[j+dk]=tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="交换排序">交换排序</h2><h3 id="冒泡排序">冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)&#123;<br>        flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=n<span class="hljs-number">-1</span>;j&gt;i;--j)&#123;<br>            <span class="hljs-keyword">if</span>(q[j]&lt;q[j<span class="hljs-number">-1</span>])&#123;<br>                swap(&amp;q[j],&amp;q[j<span class="hljs-number">-1</span>]);<br>                flag=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!flag) <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="快速排序">快速排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> i,j,x;<br>    i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>,x=q[l+r&gt;&gt;<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span>(q[i]&lt;x);<br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span>(q[j]&gt;x);<br>        <span class="hljs-keyword">if</span>(i&lt;j)swap(&amp;q[i],&amp;q[j]);<br>    &#125;<br>    quick_sort(q,l,j), quick_sort(q,j+<span class="hljs-number">1</span>,r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="选择排序">选择排序</h2><h3 id="简单选择排序">简单选择排序</h3><h4 id="基本思路">基本思路</h4><ul><li>每一次选择 剩下的<spanclass="math inline">\(n-i+1\)</span>个数中最大的 或是最小的数插入到结果之中</li><li>空间复杂度 常数级 辅助存储空间<spanclass="math inline">\(O(1)\)</span></li><li>时间复杂度 移动次数 最好是0 比较次数是<spanclass="math inline">\(n(n-1)/2\)</span> 复杂度始终是<spanclass="math inline">\(O(n^2)\)</span></li></ul><h4 id="代码实现">代码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">select_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,idx;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)&#123;<br>        idx=i;<br>        <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;n;++j)&#123;<br>            <span class="hljs-keyword">if</span>(q[idx]&lt;q[j])<br>                idx=j;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(idx!=i)swap(&amp;q[idx],&amp;q[i]);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="堆排序">堆排序</h3><h4 id="基本思路-1">基本思路</h4><ul><li>序列构建堆 我们是构建大顶堆 堆顶元素就是最大的元素</li><li>堆顶元素与最后一个元素交换 剩下元素构建堆</li><li>如此重复 每次会或得到一个最大值 我们放到最后一个 以此 我们会得到一个最大堆</li><li>调整的细节 是从下往上调节 如果 下面都是小于上面的自然上面的就是最大的</li><li>如果是从上往下调节 会导致 重复调节 影响效率</li><li>时间复杂度 堆的建立$O(n) <spanclass="math inline">\(堆的排序\)</span>O(nlog_2n)$ 调整<spanclass="math inline">\(O(h)\)</span>是堆的高度</li><li>空间复杂度 依靠常数级别空间 存储中间变量为 <spanclass="math inline">\(O(1)\)</span></li></ul><h4 id="代码实现-1">代码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//大顶堆的构建</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">largest_heap</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>&#123;<br>    <span class="hljs-type">int</span> dad,son;<br>    dad=start,son=dad*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(son&lt;=end)&#123;<br>        <span class="hljs-keyword">if</span>(son+<span class="hljs-number">1</span>&lt;=end&amp;&amp;q[son]&lt;q[son+<span class="hljs-number">1</span>])son++;<br>        <span class="hljs-keyword">if</span>(q[dad]&gt;q[son]) <span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">else</span>&#123;<br>            swap(&amp;q[son],&amp;q[dad]);<br>            dad=son,son=dad*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 堆排序的实现过程</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">heap_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=(n&gt;&gt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        largest_heap(q,i,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;--i)&#123;<br>        swap(&amp;q[<span class="hljs-number">0</span>],&amp;q[i]);<br>        largest_heap(q,<span class="hljs-number">0</span>,i<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="正在更新ing">正在更新ing</h2><p><ahref="https://gitee.com/NingCoder/Data_structure/blob/master/排序/sort01.c">源代码地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2022/04/12/%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/04/12/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="排序">排序</h1><blockquote><p>导入简单设置</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100</span><br><span class="hljs-comment">//q数组用作存储数据 temp作为归并排序过程中存储过程数据</span><br><span class="hljs-type">int</span> q[N],temp[N],n;<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="插入排序">插入排序</h2><h3 id="直接插入排序">直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//插入排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,tmp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[i<span class="hljs-number">-1</span>])&#123;<br>            tmp=q[i];<br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>;q[j]&gt;tmp;--j)q[j+<span class="hljs-number">1</span>]=q[j];<br>            q[j+<span class="hljs-number">1</span>]=tmp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="折半插入排序">折半插入排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//折半插入排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">half_insert_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,l,r,tmp,mid;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        tmp=q[i],l=<span class="hljs-number">0</span>,r=i<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(q[mid]&lt;tmp)l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>;j&gt;=l;--j)q[j+<span class="hljs-number">1</span>]=q[j];<br>        q[l]=tmp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="希尔排序">希尔排序</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//希尔排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> i,j,dk,tmp;<br>    <span class="hljs-keyword">for</span>(dk=n&gt;&gt;<span class="hljs-number">1</span>;dk&gt;=<span class="hljs-number">1</span>;dk&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(i=dk;i&lt;n;++i)&#123;<br>            <span class="hljs-keyword">if</span>(q[i]&lt;q[i-dk])&#123;<br>                tmp=q[i];<br>                <span class="hljs-keyword">for</span>(j=i-dk;j&gt;=<span class="hljs-number">0</span>&amp;&amp;q[j]&gt;tmp;j-=dk)<br>                    q[j+dk]=q[j];<br>                q[i-dk]=tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="优秀的排序">优秀的排序</h2><h3 id="快速排序">快速排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//快速排序 [y总排序模板]</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,tmp,mid;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span> ;<br>    mid=q[l+r&gt;&gt;<span class="hljs-number">1</span>],i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span>(q[i]&lt;mid);<br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span>(q[j]&gt;mid);<br>        <span class="hljs-keyword">if</span>(i&lt;j)&#123;<br>            tmp=q[i];<br>            q[i]=q[j],q[j]=tmp;<br>        &#125;<br>    &#125;<br>    quick_sort(q,l,j), quick_sort(q,j+<span class="hljs-number">1</span>,r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="归并排序">归并排序</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//归并排序 [y总排序模板]</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> i,j,mid,k;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span> ;<br>    mid=l+r&gt;&gt;<span class="hljs-number">1</span>,i=l,j=mid+<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;<br>    merge_sort(q,l,mid), merge_sort(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[j])temp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> temp[k++]=q[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)temp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r)temp[k++]=q[j++];<br><br>    <span class="hljs-keyword">for</span>(i=l,j=<span class="hljs-number">0</span>;i&lt;=r;++i,++j)q[i]=temp[j];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="正在补充ing">正在补充ing</h2><p><ahref="https://gitee.com/NingCoder/Data_structure/blob/master/排序/sort.c">源代码文件</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单总结</title>
    <link href="/2022/04/11/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    <url>/2022/04/11/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="学习记录">学习记录</h1><h2 id="数学部分">数学部分</h2><ul><li>高数部分是快完成Task了</li><li>这个月对于高数部分进行完成!</li></ul><h2 id="计算机专业课">计算机专业课</h2><ul><li>现在确实还没有开始一轮复习</li><li>不过对于数据结构部分有一点简单的认识和了解</li></ul><h2 id="英语">英语</h2><ul><li>坚持每一天背单词</li><li>也只有这些了</li></ul><h2 id="经济学专业课">经济学专业课</h2><ul><li>有点没有想到 挂科了 挺尴尬的 还是直接重修的那种课程!</li><li>完成基本的60分就好了 希望下次注意一下吧!</li></ul><h1 id="计算机方面">计算机方面</h1><h2 id="数据结构和算法">数据结构和算法</h2><h3 id="数据结构">数据结构</h3><ul><li>链表 队列 栈</li><li>树 图</li><li>高级的数据结构<ul><li>B/B+树</li><li>并查集</li><li>等</li></ul></li><li>补充知识</li></ul><h3 id="算法">算法</h3><ul><li>暴力枚举</li><li>排序<ul><li>冒泡 插入 希尔</li><li>归并 快排</li><li>堆排序 桶排序</li></ul></li><li>双指针</li><li>回溯<ul><li>全排列 下一个排列等</li></ul></li><li>贪心 (数学证明_没有证明的贪心 不是贪心__)</li><li>DFS BFS</li><li>等</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>23考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>致未来女朋友的一封信</title>
    <link href="/2022/03/14/%E8%87%B4%E6%9C%AA%E6%9D%A5%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <url>/2022/03/14/%E8%87%B4%E6%9C%AA%E6%9D%A5%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="致未来女朋友的一封信">致未来女朋友的一封信</h1><h2 id="缘起">缘起</h2><p>时间过得好快，转眼间我马上就要步入大三的紧张生活了。在这个过程之中，我的心智逐渐成熟起来了，我经历了很多有意义的事情:</p><p>1.<strong>学会了喜欢一个人</strong></p><p>2.<strong>学会了及时止损</strong></p><p>3.<strong>知道了自己的人生目标，我知道我自己想要的是什么，应该做一个怎么样的人。</strong></p><p>4.<strong>明白了自己的责任与担当</strong></p><p>5.<strong>我也懂了人生的意义以及对于这个世界的思考和认识</strong></p><p>我现在的努力和拼搏是为了让自己成长起来，很有意思的。能遇到你，虽然现在的我不知道你在何方，你在想什么。但我笃定注定相遇的人始终会在一起的。所以我现在想记录一下自己，给你展示出一个更加真实的我。</p><h2 id="思绪">思绪</h2><h3 id="高中">高中</h3><p>我向你坦白，我高中曾经喜欢过一个女孩子。她是一个很不错的姑娘，遗憾的是她没有把那种温柔给予我。我也不懂怎么去喜欢，去爱。我只是傻傻地喜欢，像是一个男孩子内心特有的独角戏。其实挺羞涩的，我没敢大方地去追求过。</p><p>后来的结局不是很美，但时间告诉我，要学会及时止损。</p><h3 id="大学">大学</h3><p>挺遗憾的，算是亏欠。我和我那时候喜欢的女孩子走到了一起，开头的故事很美，但没有走到最后。我成了自己最讨厌的人，<em>disgustedboy</em>.但我细想恋爱的过程，我很是缺乏那种骨子的安全感与陪件。她没有给足过我，让我处于那种“一个人也挺好”的错觉中。在同一所大学读书，却很多时候处成了异地恋。</p><p>我很不开心，我不明白。当爱情失衡的时候，没有一方都主动平衡这杆秤。就这样，我们走到了结</p><h2 id="感思">感思</h2><p>在分手后的时间，我刚开始心里很不开心。但我故作镇静，痛苦失落。纸是包不住火的，在最后相遇时候，我奋力去求着她，其实我一直很卑微，我只是想获得那份属于对我骨子里的喜欢。</p><p>失荡的日子里，我很丧。</p><p>但我不想让自己这样去颓废下去。因为我还有梦想，我要去做窝喜欢的事情，我要为了我这一生所坚守的信念所执着。</p><h2 id="改变">改变</h2><p>我要悄悄努力，做自己喜欢的事情。失恋很痛苦，但它给我了很大的力量，它让我明白我自己的强大，正如海明威的所言“人不能被打败，只能被毁灭”。打败我的永远只能是自己，我将时间放在学习，陪件父母，爷爷奶奶身上。</p><p>我看着爷爷奶奶健健康康的生活着，我很开心。陪件我那么久的亲人，他们一直为我默默的付出着,我却没有发现他们，我要好好地陪件着他们，去照倾爷爷奶奶。</p><p>现在的我已经二刷计网到网络层，我很开心。我觉得合理的使用时间能给我带来快乐和动力，更能助我在追求梦想的道路愈来愈近。让自己充实起来，我选择锻炼，我去打羽毛球，让自己有一个更开心的每</p><p>我现在想考的大学是华科。我不知道我会不会考得上，但我不会放弃去坚持，去做我喜欢的事情。笃定我现在的奋斗会我们的相遇奠定基础。</p><h2 id="期盼">期盼</h2><p>重新认识一个人很复杂，我希望我们相遇相恋再不分开?好吗?</p><p>我只想健健康康的生活，开开心心的和你度过每一天。我们给子彼此的偏爱和那份安全感，一起进步，一起努力!</p><p>我想成为一个程序员，进入大T工作。在学习几年之后，我想在西安买一套属于自己的房子，将自己安顿下来。和你度过幸福的时光。</p><p>也许生活有忧虑，不安。我们可以吵架，可以有不同的意见。但我们更需要彼此心连心，紧紧的贴在一起。在吵架之后，我们依旧能和往日一样，重新回到彼此的身旁。</p><p>我们会彼此相爱，直至生命的尽头</p><h2 id="尾声">尾声</h2><p>写于北京时间2021年8月7日凌晨1:30:52</p><p>日后会持续记录我个人的生活状态和对于你的期盼!</p><p>我永远相信，我们终会相遇</p>]]></content>
    
    
    
    <tags>
      
      <tag>致未来</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>年轻人的社交元宇宙</title>
    <link href="/2022/03/10/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%A4%BE%E4%BA%A4%E5%85%83%E5%AE%87%E5%AE%99/"/>
    <url>/2022/03/10/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%A4%BE%E4%BA%A4%E5%85%83%E5%AE%87%E5%AE%99/</url>
    
    <content type="html"><![CDATA[<h1 id="年轻人的社交元宇宙">年轻人的社交元宇宙</h1><p><a href="https://www.soulapp.cn/home">小站</a> ## 我们的口号 1.“还孤单一个人吗，快来soul银河寻找那个TA” 2.不约不恋不看脸，我们就单纯的聊聊天吧”</p><h2 id="功能介绍">功能介绍</h2><ol type="1"><li>瞬间广场——用户可以通过瞬间功能发表文字. 图片.视频和语音；Soul通过算法为用户推荐可能感兴趣的瞬间，用户可以对其他人发布感兴趣的内容进行评论和点赞。</li><li>灵魂互动——系统为用户一键连接可能聊得来的人，在线实时聊天。</li><li>语音互动——系统为用户匹配可能感兴趣的人，在线语音聊天。</li><li>群聊派对——主题式多人语音群聊功能。用户可根据主题创建派对，或选择感兴趣的派对进行交流。</li><li>脸基尼视频互动——系统为用户连接想要视频聊天的人，在线视频聊天</li><li>Soul狼人——系统为用户提供的多人互动策略游戏</li><li>校园吧——校园认证用户专属的交流空间 ## 发展历程</li><li>2021年5月，Soul上线校园吧。</li><li>2021年1月，Soul月活跃用户量突破3000万，成为行业同品类中日均DAU启动次数.日均发布率和Z世代用户渗透率最高的App之一。</li><li>2020年10月，Soul首次登顶App Store社交榜。</li><li>2020年8月，Soul推出群聊功能，群聊派对正式上线。</li><li>2020年7月，Soul月活跃用户量突破2000万。</li><li>2019年11月13日，Soul App在苹果AppStore下架，对此，Soul做出回应：为提升用户体验，针对iOS端正在更新升级系统。2019年11月16日，Soul App 在 AppStore恢复下载，各项功能均可以正常使用。</li><li>2019年9月10日，Soul App重新上架苹果AppStore，各项功能均可正常使用。SoulApp表示，将继续投入大量精力，通过技术和人工手段完善内容治理。</li><li>2019年8月28日，SoulApp陆续在各大安卓应用商店重新上架，各项功能均可以正常使用。Soul表示，为了共创清朗和谐的线上空间，Soul审核团队将对用户内容进行更严格的审核和分发。同时SoulApp注册年龄需年满18周岁，针对存量青少年，Soul更新了青少年模式</li><li>2019年6月28日，国家网信办通报了会同有关部门.针对网络音频乱象启动专项整治行动的相关情况，包括Soul在内的多款应用牵涉其中。当天，SoulApp在各大应用商店下架。对此，Soul回应称：“我们充分理解网络平台肩负的社会责任，为了维护健康的社交生态，Soul将配合有关部门深入自查自改，严格审核相关功能和内容，采取必要措施以完全符合所有相关法律法规要求。”</li><li>2019年1月，自定义头像功能上线，让Souler做独一无二的自己。9月，脸基尼互动功能发布，开启视频社交新玩法。</li><li>2018年12月，Soul月活跃用户量突破1000万。</li><li>2018年6月，语音互动功能发布，Soul跻身95后最受欢迎的社交App之一。</li><li>2017年11月，Soul推荐2.0功能上线，实现千人千面的广场和星球，Soul正式步入算法时代。</li><li>2016年11月，Soul App 1.0 正式上线，通过种子用户们自发安利.口碑传播，注册用户快速增加。</li><li>2016年，SoulApp产品正式上线。</li><li>2015年6月，任意门科技有限公司在上海正式成立。2021年7月，Soul暂停上市。2021年，Soul作为深受Z世代年轻人喜爱的社交平台，迎合年轻人多元化的社交需求，联合美团推出剧本杀盲盒，并邀请《密室大逃脱大神版》中的CP蒲熠星.郭文韬作为美团剧本杀甄选官，一同打造剧本杀好本盲盒活动。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>不开心你就来Soul呀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/09/hello-world/"/>
    <url>/2022/03/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>HelloWorld!</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
